import { removeInvalidAnswers } from '../utils';

describe('removeInvalidAnswers', () => {
  test.each([
    [undefined, []],
    [null, []],
    [[], []],
    [
      [
        { type: 'point' },
        { type: 'point', x: null, y: undefined },
        { type: 'point', x: 'a', y: 2 },
        { type: 'point', x: 'a', y: 2.76 },
        { type: 'point', x: 0, y: '2.76' },
        { type: 'point', x: 0, y: 2.76 },
        { type: 'nonexistent type', x: 'a', y: 2 },
        { type: 'segment' },
        { type: 'segment', from: null, to: null },
        { type: 'segment', from: {}, to: {} },
        { type: 'segment', from: {}, to: { x: 'a', y: NaN } },
        { type: 'segment', from: { x: 0, y: 0 }, to: { x: 1, y: 1 } },
        { type: 'segment', from: { x: 0, y: 0 } },
        { type: 'vector' },
        { type: 'vector', from: null, to: null },
        { type: 'vector', from: {}, to: { a: 'a', b: 0 } },
        { type: 'vector', from: {}, to: { x: 'a', y: NaN } },
        { type: 'vector', from: { x: 0, y: 0 }, to: { x: 1, y: 1 } },
        { type: 'vector', from: { x: 0, y: 0 } },
        { type: 'line' },
        { type: 'line', from: null, to: null },
        { type: 'line', from: {}, to: {} },
        { type: 'line', from: null, to: { x: 'a', y: NaN } },
        { type: 'line', from: { x: 0, y: 0 }, to: { x: 1, y: 1 } },
        { type: 'line', to: { x: 0, y: 0 } },
        { type: 'ray' },
        { type: 'ray', from: null, to: null },
        { type: 'ray', from: {}, to: {} },
        { type: 'ray', from: null, to: { x: 'a', y: NaN } },
        { type: 'ray', from: { x: 0, y: 0 }, to: { x: 1, y: 1 } },
        { type: 'ray', to: { x: 0, y: 0 } },
        { type: 'polygon' },
        { type: 'polygon', points: null },
        { type: 'polygon', points: [] },
        { type: 'polygon', points: [{}] },
        { type: 'polygon', points: [{ x: 1, a: 'v'}] },
        { type: 'polygon', points: [{ x: 1, y: 'v'}] },
        { type: 'polygon', points: [{ x: NaN, y: 'v'}] },
        { type: 'polygon', points: [{ x: 0, y: 0 }] },
        { type: 'polygon', points: [{ x: 0, y: 0 }, {}] },
        { type: 'circle' },
        { type: 'circle', from: null, to: null },
        { type: 'circle', edge: null, root: null },
        { type: 'circle', from: {}, to: {} },
        { type: 'circle', edge: {}, root: {} },
        { type: 'circle', from: null, to: { x: 'a', y: NaN } },
        { type: 'circle', edge: null, root: { x: 'a', y: NaN } },
        { type: 'circle', from: { x: 0, y: 0 }, to: { x: 1, y: 1 } },
        { type: 'circle', edge: { x: 0, y: 0 }, root: { x: 1, y: 1 } },
        { type: 'circle', to: { x: 0, y: 0 } },
        { type: 'circle', root: { x: 0, y: 0 } },
        { type: 'parabola' },
        { type: 'parabola', edge: null, root: null },
        { type: 'parabola', edge: {}, root: {} },
        { type: 'parabola', edge: null, root: { x: 'a', y: NaN } },
        { type: 'parabola', edge: { x: 0, y: 0 }, root: { x: 1, y: 1 } },
        { type: 'parabola', root: { x: 0, y: 0 } },
        { type: 'sine' },
        { type: 'sine', edge: null, root: null },
        { type: 'sine', edge: {}, root: {} },
        { type: 'sine', edge: null, root: { x: 'a', y: NaN } },
        { type: 'sine', edge: { x: 0, y: 0 }, root: { x: 1, y: 1 } },
        { type: 'sine', root: { x: 0, y: 0 } },
      ],
      [
        { type: 'point', x: 0, y: 2.76 },
        { type: 'segment', from: { x: 0, y: 0 }, to: { x: 1, y: 1 } },
        { type: 'vector', from: { x: 0, y: 0 }, to: { x: 1, y: 1 } },
        { type: 'line', from: { x: 0, y: 0 }, to: { x: 1, y: 1 } },
        { type: 'ray', from: { x: 0, y: 0 }, to: { x: 1, y: 1 } },
        { type: 'polygon', points: [{ x: 0, y: 0 }] },
        { type: 'circle', edge: { x: 0, y: 0 }, root: { x: 1, y: 1 } },
        { type: 'parabola', edge: { x: 0, y: 0 }, root: { x: 1, y: 1 } },
        { type: 'sine', edge: { x: 0, y: 0 }, root: { x: 1, y: 1 } },
      ],
    ],
  ])(
    'answers: %j, only valid answers: %j',
    (answers, validAnswers) => {
      expect(removeInvalidAnswers(answers)).toEqual(validAnswers);
    }
  );
})
