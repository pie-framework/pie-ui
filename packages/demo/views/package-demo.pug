include mixins
html
  head
    meta(charset="utf-8")
    link(href="https://fonts.googleapis.com/css?family=Roboto", rel="stylesheet")
    script(src="//unpkg.com/showdown@1.9.0/dist/showdown.min.js")
    script(src="/assets/index.js", charset="utf-8")
    style.

      html, body {
        margin-left: 0;
        --mdc-theme-primary: !{pkg.version === 'next' ? 'orange' : '#3f51b5'};
         /*padding: 0;*/
      }

      * {
        font-family: 'Roboto', sans-serif;
      }
      a {
        display: inline;
      }
      .holder{
        display: flex;
        position: relative;
        padding: 30px;

      }
      .content{
        position: relative;
        top: 50px;
        padding: 30px;
      }

      .element {
        flex: 2;
        margin-right: 100px;
      }

      .changelog-holder {
        flex: 1;
      }

    script(src=`/assets/${name}.js`, charset="utf-8")

    script(type="text/javascript", charset="utf-8").



      window._demoSession = (!{JSON.stringify(session)} || []);

      document.addEventListener('session-changed', e => {
        console.log('session changed', e);
        // Note: this is an undocumented access to session that shouldn't be used, but here for debugging purposes
        console.debug(JSON.stringify(e.target._session));
        console.log("session:", window._demoSession );
      });

      function renderChangelog(el) {

        if(el.textContent !== '') {
          var converter = new showdown.Converter();
          var html      = converter.makeHtml(el.textContent);
          el.innerHTML = html;
        }
      }

      document.addEventListener("DOMContentLoaded", () => {

        const data = !{JSON.stringify(data)};

        customElements.whenDefined('!{tagName}').then(() => {

          if(data && data.models){
            const el = '!{tagName}';
            data.models.forEach( m => {
              const n = document.querySelector(`[pie-id="${m.id}"]`);
              n.model = m;
              /**
               * Currently pie expects the outer context to pass in an object reference for the session,
               * which the element will update. so on change we just need to look at this referenced array
               * defined as _demoSession here.
               */
              let session = window._demoSession.find(s => s.id === m.id);
              if(!session){
                session = {id: m.id};
                window._demoSession.push(session);
              }
              n.session = session;
            });

          } else {
            console.error('no data?', data);
          }

        });
        renderChangelog( document.querySelector('.next-changelog'));
        renderChangelog( document.querySelector('.changelog'));
      });
  body
    +top_bar(gitInfo, name, pkg.version)
    div.holder
      div.element
        | !{markup}

      div.changelog-holder
        h2 Next Changelog
        div.next-changelog
          | !{nextChangelog}
        hr/
        div.changelog
          | !{changelog}

